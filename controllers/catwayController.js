const Catway = require('../models/catway');
const Reservation = require('../models/reservation');

// üìã GET all catways
exports.getAllCatways = async (req, res) => {
  try {
    const catways = await Catway.find();
    res.status(200).json(catways);
  } catch (err) {
    console.error('‚ùå Erreur getAllCatways:', err.message);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// üîç GET catway by ID
exports.getCatwayById = async (req, res) => {
  try {
    const catway = await Catway.findById(req.params.id);
    if (!catway) return res.status(404).json({ message: 'Catway introuvable' });
    res.status(200).json(catway);
  } catch (err) {
    console.error('‚ùå Erreur getCatwayById:', err.message);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// ‚ûï POST create catway
exports.createCatway = async (req, res) => {
  try {
    const { catwayNumber, type, catwayState } = req.body;
    const catway = new Catway({ catwayNumber, type, catwayState });
    await catway.save();
    console.log('‚úÖ Catway cr√©√© :', catway);

    if (req.headers.accept?.includes('text/html')) {
      req.flash('success', 'Catway cr√©√© avec succ√®s');
      return res.redirect('/dashboard');
    }

    res.status(201).json(catway);
  } catch (err) {
    console.error('‚ùå Erreur cr√©ation catway :', err.message);

    if (req.headers.accept?.includes('text/html')) {
      req.flash('error', 'Erreur lors de la cr√©ation du catway');
      return res.redirect('/dashboard');
    }

    res.status(400).json({ message: 'Erreur cr√©ation catway' });
  }
};

// üîÅ POST update catway state
exports.updateCatwayState = async (req, res) => {
  try {
    const { id, catwayState } = req.body;
    const catway = await Catway.findByIdAndUpdate(id, { catwayState }, { new: true });
    if (!catway) return res.status(404).json({ message: 'Catway introuvable' });
    res.status(200).json(catway);
  } catch (err) {
    console.error('‚ùå Erreur updateCatwayState:', err.message);
    res.status(500).json({ message: 'Erreur mise √† jour catway' });
  }
};

// ‚ùå POST delete catway
exports.deleteCatway = async (req, res) => {
  try {
    const { id } = req.body;
    const result = await Catway.findByIdAndDelete(id);
    if (!result) return res.status(404).json({ message: 'Catway introuvable' });
    res.status(200).json({ message: 'Catway supprim√©' });
  } catch (err) {
    console.error('‚ùå Erreur deleteCatway:', err.message);
    res.status(500).json({ message: 'Erreur suppression catway' });
  }
};

// üìÜ GET all reservations for a catway
exports.getReservationsForCatway = async (req, res) => {
  try {
    const reservations = await Reservation.find({ catwayNumber: req.params.id });
    res.status(200).json(reservations);
  } catch (err) {
    console.error('‚ùå Erreur getReservationsForCatway:', err.message);
    res.status(500).json({ message: 'Erreur r√©cup√©ration r√©servations' });
  }
};

// üîç GET reservation detail from a catway
exports.getReservationDetailForCatway = async (req, res) => {
  try {
    const reservation = await Reservation.findById(req.params.rid);
    if (!reservation) return res.status(404).json({ message: 'R√©servation introuvable' });
    res.status(200).json(reservation);
  } catch (err) {
    console.error('‚ùå Erreur getReservationDetailForCatway:', err.message);
    res.status(500).json({ message: 'Erreur d√©tail r√©servation' });
  }
};

// ‚ûï POST create reservation for a catway
exports.createReservationForCatway = async (req, res) => {
  try {
    const { clientName, boatName, checkIn, checkOut } = req.body;
    const catwayId = req.params.id;
    const catway = await Catway.findById(catwayId);

    if (!catway) return res.status(404).json({ message: 'Catway introuvable' });

    if (!catway.catwayNumber) {
      req.flash('error', "Ce catway n‚Äôa pas de num√©ro, r√©servation impossible.");
      return res.redirect('/catways');
    }

    const conflit = await Reservation.findOne({
      catway: catwayId,
      $or: [
        { checkIn: { $lt: checkOut }, checkOut: { $gt: checkIn } }
      ]
    });

    if (conflit) {
      req.flash('error', 'Ce catway est d√©j√† r√©serv√© sur cette p√©riode.');
      return res.redirect(`/catways/${catwayId}`);
    }

    const reservation = new Reservation({
      catway: catway._id,
      catwayNumber: catway.catwayNumber,
      clientName,
      boatName,
      checkIn,
      checkOut
    });

    await reservation.save();

    req.flash('success', 'R√©servation enregistr√©e avec succ√®s.');
    res.redirect(`/catways/${catwayId}`);
  } catch (err) {
    console.error("‚ùå Erreur createReservationForCatway:", err.message);
    req.flash('error', '√âchec de la r√©servation.');
    res.redirect(`/catways/${req.params.id}`);
  }
};

// ‚ùå POST delete reservation for a catway
exports.deleteReservationForCatway = async (req, res) => {
  try {
    const result = await Reservation.findByIdAndDelete(req.params.rid);
    if (!result) return res.status(404).json({ message: 'R√©servation introuvable' });
    res.status(200).json({ message: 'R√©servation supprim√©e' });
  } catch (err) {
    console.error('‚ùå Erreur deleteReservationForCatway:', err.message);
    res.status(500).json({ message: 'Erreur suppression r√©servation' });
  }
};